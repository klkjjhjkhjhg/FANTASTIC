package netgloo.models;

//import org.springframework.security.core.GrantedAuthority;
//import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.authority.*;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

/**
 * An entity User composed by three fields (id, email, name).
 * The Entity annotation indicates that this class is a JPA entity.
 * The Table annotation specifies the name for the table in the db.
 *
 * @author netgloo
 */
@Entity
@Table(name = "users")
public class User implements UserDetails{
  // ------------------------
  // PRIVATE FIELDS
  // ------------------------
  
  // An autogenerated id (unique for each user in the db)
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Long id;
  
  // The user's email
  @NotNull
  private String email;
  
  // The user's name
  @NotNull
  private String username;

  @NotNull
  private String password;

  //@NotNull
  //private long groupid;

  @ManyToMany(cascade = {CascadeType.REFRESH},fetch = FetchType.EAGER)
  private List<Group> roles;
  // ------------------------
  // PUBLIC METHODS
  // ------------------------
  
  public User() { }

  public User(Long id) {
    this.id = id;
  }
  
  public User(String email, String name, String userpwd) {
    this.email = email;
    this.username = name;
    this.password = userpwd;
  }

  // Getter and setter methods

  public Long getId() {
    return id;
  }

  public void setId(Long value) {
    this.id = value;
  }

  public String getEmail() {
    return email;
  }
  
  public void setEmail(String value) {
    this.email = value;
  }
  

  public List<Group> getRoles() {
    return roles;
  }

  public void setRoles(List<Group> roles) {
    this.roles = roles;
  }

  @Override
  public String getPassword() {
    return this.password;
  }

  @Override
  public String getUsername() {
    return this.username;
  }

  @Override
  public boolean isAccountNonExpired() {
    return true;
  }

  @Override
  public boolean isAccountNonLocked() {
    return true;
  }

  @Override
  public boolean isCredentialsNonExpired() {
    return true;
  }

  @Override
  public boolean isEnabled() {
    return true;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  @Override
  public Collection<? extends GrantedAuthority> getAuthorities() {
    List<GrantedAuthority> auths = new ArrayList<>();
    List<Group> roles = this.getRoles();
    for (Group role : roles) {
      auths.add(new SimpleGrantedAuthority(role.getName()));
    }
    return auths;
  }


  public void setPassword(String password) {
    this.password = password;
  }

  /*@Override
  public Collection<? extends GrantedAuthority> getAuthorities() {
    List<GrantedAuthority> auths = new ArrayList<>();
    List<Group> roles = this.getRoles();
    for (Group role : roles) {
      auths.add(new SimpleGrantedAuthority(role.getGroupName()));
    }
    return auths;
  }

  @Override
  public String getPassword() {
    return password;
  }

  @Override
  public String getUsername() {
    return username;
  }

  public void setUsername(String name) {
    this.username = name;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  @Override
  public boolean isAccountNonExpired() {
    return true;
  }

  @Override
  public boolean isAccountNonLocked() {
    return true;
  }

  @Override
  public boolean isCredentialsNonExpired() {
    return true;
  }

  @Override
  public boolean isEnabled()
   {
    return true;
  }
  */
} // class User
